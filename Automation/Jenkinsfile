pipeline {
    agent any
 
    environment {
        BRANCH_NAME = 'master'
        ECLIPSE_WORKSPACE = 'C:\\Users\\badar\\git\\repository2\\Automation'
        COMMIT_MESSAGE = 'Jenkins: Auto-commit after build'
    }
 
    // Auto-trigger every 5 mins on Git changes
    triggers {
        pollSCM('H H * * *')
    }
 
    stages {
        stage('Checkout from Git') {
            steps {
                git branch: "${env.BRANCH_NAME}",
                    url: 'https://github.com/Badarinath15122001/Capstone-NopCommerce.git'
            }
        }
 
        stage('Copy Files from Eclipse Workspace') {
            steps {
                bat """
                echo Copying files from Eclipse workspace...
                xcopy /E /Y /I "${ECLIPSE_WORKSPACE}\\*" "."
                """
            }
        }
 
        stage('Build & Test') {
            steps {
                bat 'mvn clean test -DsuiteXmlFile=testng.xml'
            }
        }
 
        stage('Commit & Push Changes') {
            steps {
                script {
                    echo 'Checking for changes to push...'
                    withCredentials([usernamePassword(
                        credentialsId: 'capstone',
                        usernameVariable: 'GIT_USER',
                        passwordVariable: 'GIT_TOKEN')]) {
 
                        bat """
                            git config user.email "jenkins@pipeline.com"
                            git config user.name "Jenkins CI"
 
                            git status
                            git add .
 
                            REM Commit only if there are changes
                            git diff --cached --quiet || git commit -m "${COMMIT_MESSAGE}"
 
                            REM Push using token
                            git push https://%GIT_USER%:%GIT_TOKEN%@github.com/Badarinath15122001/Capstone-NopCommerce.git ${BRANCH_NAME}
                        """
                    }
                }
            }
        }
    }
 
    post {
        always {
            // Archive screenshots
            archiveArtifacts artifacts: 'reports/Screenshots/*', fingerprint: true
 
 
            // Publish Extent Report
            
                dir('Automation') {
                    echo 'Publishing HTML reports...'

                    publishHTML(target: [
                        reportDir: 'test-output',
                        reportFiles: 'emailable-report.html',
                        reportName: 'TestNG Report'
                    ])

                    publishHTML(target: [
                        reportDir: 'reports/ExtentReports',
                        reportFiles: 'ExtentReport_*.html',
                        reportName: 'Extent Report'
                    ])
                }
            }
        }
    

        }
    }
}